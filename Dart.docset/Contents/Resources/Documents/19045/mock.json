{"id":"mock","name":"package:unittest/mock.dart","children":[{"returnType":{"name":"Matcher","refId":"matcher/Matcher"},"id":"neverThrew1()","name":"neverThrew","children":[{"id":"value","name":"value","kind":"param"}],"kind":"method","comment":"\n[neverThrew] asserts that no matching call to a method threw\na value that matched [value].\n","line":"1205"},{"returnType":{"name":"Matcher","refId":"matcher/Matcher"},"id":"sometimeThrew1()","name":"sometimeThrew","children":[{"id":"value","name":"value","kind":"param"}],"kind":"method","comment":"\n[sometimeThrew] asserts that at least one matching call to a method threw\na value that matched [value].\n","line":"1198"},{"returnType":{"name":"Matcher","refId":"matcher/Matcher"},"id":"alwaysThrew1()","name":"alwaysThrew","children":[{"id":"value","name":"value","kind":"param"}],"kind":"method","comment":"\n[alwaysThrew] asserts that all matching calls to a method threw\na value that matched [value].\n","line":"1191"},{"returnType":{"name":"Matcher","refId":"matcher/Matcher"},"id":"neverReturned1()","name":"neverReturned","children":[{"id":"value","name":"value","kind":"param"}],"kind":"method","comment":"\n[neverReturned] asserts that no matching calls to a method returned\na value that matched [value].\n","line":"1184"},{"returnType":{"name":"Matcher","refId":"matcher/Matcher"},"id":"sometimeReturned1()","name":"sometimeReturned","children":[{"id":"value","name":"value","kind":"param"}],"kind":"method","comment":"\n[sometimeReturned] asserts that at least one matching call to a method\nreturned a value that matched [value].\n","line":"1177"},{"returnType":{"name":"Matcher","refId":"matcher/Matcher"},"id":"alwaysReturned1()","name":"alwaysReturned","children":[{"id":"value","name":"value","kind":"param"}],"kind":"method","comment":"\n[alwaysReturned] asserts that all matching calls to a method returned\na value that matched [value].\n","line":"1170"},{"returnType":{"name":"Matcher","refId":"matcher/Matcher"},"id":"throwing1()","name":"throwing","children":[{"id":"value","name":"value","kind":"param"}],"kind":"method","comment":"\n[throwing] matches log entrues where the call to a method threw\na value that matched [value].\n","line":"1065"},{"returnType":{"name":"Matcher","refId":"matcher/Matcher"},"id":"returning1()","name":"returning","children":[{"id":"value","name":"value","kind":"param"}],"kind":"method","comment":"\n[returning] matches log entries where the call to a method returned\na value that matched [value].\n","line":"1058"},{"returnType":{"name":"Matcher","refId":"matcher/Matcher"},"id":"happenedAtMost1()","name":"happenedAtMost","children":[{"id":"count","name":"count","kind":"param"}],"kind":"method","comment":"[happenedAtMost] matches a maximum number of calls. ","line":"995"},{"returnType":{"name":"Matcher","refId":"matcher/Matcher"},"id":"happenedAtLeast1()","name":"happenedAtLeast","children":[{"id":"count","name":"count","kind":"param"}],"kind":"method","comment":"[happenedAtLeast] matches a minimum number of calls. ","line":"990"},{"returnType":{"name":"Matcher","refId":"matcher/Matcher"},"id":"happenedExactly1()","name":"happenedExactly","children":[{"id":"count","name":"count","kind":"param"}],"kind":"method","comment":"[happenedExactly] matches an exact number of calls. ","line":"985"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"_qualifiedName2()","name":"_qualifiedName","children":[{"id":"owner","name":"owner","kind":"param"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"method","name":"method","kind":"param"}],"kind":"method","comment":"Utility function for optionally qualified method names ","isPrivate":true,"line":"426"},{"returnType":{"name":"CallMatcher","refId":"mock/CallMatcher"},"id":"callsTo11()","name":"callsTo","children":[{"isOptional":true,"id":"method","name":"method","kind":"param"},{"defaultValue":"_noArg","isOptional":true,"id":"arg0","name":"arg0","kind":"param","line":"281"},{"defaultValue":"_noArg","isOptional":true,"id":"arg1","name":"arg1","kind":"param","line":"282"},{"defaultValue":"_noArg","isOptional":true,"id":"arg2","name":"arg2","kind":"param","line":"283"},{"defaultValue":"_noArg","isOptional":true,"id":"arg3","name":"arg3","kind":"param","line":"284"},{"defaultValue":"_noArg","isOptional":true,"id":"arg4","name":"arg4","kind":"param","line":"285"},{"defaultValue":"_noArg","isOptional":true,"id":"arg5","name":"arg5","kind":"param","line":"286"},{"defaultValue":"_noArg","isOptional":true,"id":"arg6","name":"arg6","kind":"param","line":"287"},{"defaultValue":"_noArg","isOptional":true,"id":"arg7","name":"arg7","kind":"param","line":"288"},{"defaultValue":"_noArg","isOptional":true,"id":"arg8","name":"arg8","kind":"param","line":"289"},{"defaultValue":"_noArg","isOptional":true,"id":"arg9","name":"arg9","kind":"param","line":"290"}],"kind":"method","comment":"\nReturns a [CallMatcher] for the specified signature. [method] can be\nnull to match anything, or a literal [String], a predicate [Function],\nor a [Matcher]. The various arguments can be scalar values or [Matcher]s.\nTo match getters and setters, use \"get \" and \"set \" prefixes on the names.\nFor example, for a property \"foo\", you could use \"get foo\" and \"set foo\"\nas literal string arguments to callsTo to match the getter and setter\nof \"foo\".\n","line":"280"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"_mockingErrorFormatter5()","name":"_mockingErrorFormatter","children":[{"id":"actual","name":"actual","kind":"param"},{"ref":{"name":"Matcher","refId":"matcher/Matcher"},"id":"matcher","name":"matcher","kind":"param"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"signature","name":"signature","kind":"param"},{"ref":{"name":"MatchState","refId":"matcher/MatchState"},"id":"matchState","name":"matchState","kind":"param","line":"102"},{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"verbose","name":"verbose","kind":"param","line":"102"}],"kind":"method","comment":"\nThe error formatter for mocking is a bit different from the default one\nfor unit testing; instead of the third argument being a 'reason'\nit is instead a [signature] describing the method signature filter\nthat was used to select the logs that were verified.\n","isPrivate":true,"line":"101"},{"ref":{"name":"LogEntryList","refId":"mock/LogEntryList"},"id":"sharedLog","name":"sharedLog","kind":"variable","line":"1209"},{"ref":{"name":"Matcher","refId":"matcher/Matcher"},"id":"happenedAtMostOnce","name":"happenedAtMostOnce","kind":"variable","line":"1009"},{"ref":{"name":"Matcher","refId":"matcher/Matcher"},"id":"happenedAtLeastOnce","name":"happenedAtLeastOnce","kind":"variable","line":"1006"},{"ref":{"name":"Matcher","refId":"matcher/Matcher"},"id":"happenedOnce","name":"happenedOnce","kind":"variable","line":"1003"},{"ref":{"name":"Matcher","refId":"matcher/Matcher"},"id":"neverHappened","name":"neverHappened","kind":"variable","line":"1000"},{"id":"_noArg","name":"_noArg","kind":"variable","isPrivate":true,"line":"135"},{"ref":{"name":"_MockFailureHandler","refId":"mock/_MockFailureHandler"},"id":"_mockFailureHandler","name":"_mockFailureHandler","kind":"variable","isPrivate":true,"line":"129"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"id":"Mock","name":"Mock","children":[{"isSetter":true,"id":"logging=1()","name":"logging=","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"value","name":"value","kind":"param"}],"kind":"method","line":"1229"},{"returnType":{"name":"Behavior","refId":"mock/Behavior"},"id":"when1()","name":"when","children":[{"ref":{"name":"CallMatcher","refId":"mock/CallMatcher"},"id":"logFilter","name":"logFilter","kind":"param"}],"kind":"method","comment":"\n[when] is used to create a new or extend an existing [Behavior].\nA [CallMatcher] [filter] must be supplied, and the [Behavior]s for\nthat signature are returned (being created first if needed).\n\nTypical use case:\n\n    mock.when(callsTo(...)).alwaysReturn(...);\n","line":"1273"},{"id":"noSuchMethod1()","name":"noSuchMethod","children":[{"ref":{"name":"InvocationMirror","refId":"dart.core/InvocationMirror"},"id":"invocation","name":"invocation","kind":"param"}],"kind":"method","comment":"\nThis is the handler for method calls. We loop through the list\nof [Behavior]s, and find the first match that still has return\nvalues available, and then do the action specified by that\nreturn value. If we find no [Behavior] to apply an exception is\nthrown.\n","line":"1291"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"verifyZeroInteractions0()","name":"verifyZeroInteractions","kind":"method","comment":"[verifyZeroInteractions] returns true if no calls were made ","line":"1409"},{"returnType":{"name":"LogEntryList","refId":"mock/LogEntryList"},"id":"getLogs3()","name":"getLogs","children":[{"ref":{"name":"CallMatcher","refId":"mock/CallMatcher"},"isOptional":true,"id":"logFilter","name":"logFilter","kind":"param"},{"ref":{"name":"Matcher","refId":"matcher/Matcher"},"isOptional":true,"id":"actionMatcher","name":"actionMatcher","kind":"param","line":"1435"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"id":"destructive","name":"destructive","kind":"param","line":"1436"}],"kind":"method","comment":"\n[getLogs] extracts all calls from the call log that match the\n[logFilter], and returns the matching list of [LogEntry]s. If\n[destructive] is false (the default) the matching calls are left\nin the log, else they are removed. Removal allows us to verify a\nset of interactions and then verify that there are no other\ninteractions left. [actionMatcher] can be used to further\nrestrict the returned logs based on the action the mock performed.\n[logFilter] can be a [CallMatcher] or a predicate function that\ntakes a [LogEntry] and returns a bool.\n\nTypical usage:\n\n    getLogs(callsTo(...)).verify(...);\n","line":"1434"},{"returnType":{"name":"LogEntryList","refId":"mock/LogEntryList"},"id":"calls11()","name":"calls","children":[{"id":"method","name":"method","kind":"param"},{"defaultValue":"_noArg","isOptional":true,"id":"arg0","name":"arg0","kind":"param","line":"1452"},{"defaultValue":"_noArg","isOptional":true,"id":"arg1","name":"arg1","kind":"param","line":"1453"},{"defaultValue":"_noArg","isOptional":true,"id":"arg2","name":"arg2","kind":"param","line":"1454"},{"defaultValue":"_noArg","isOptional":true,"id":"arg3","name":"arg3","kind":"param","line":"1455"},{"defaultValue":"_noArg","isOptional":true,"id":"arg4","name":"arg4","kind":"param","line":"1456"},{"defaultValue":"_noArg","isOptional":true,"id":"arg5","name":"arg5","kind":"param","line":"1457"},{"defaultValue":"_noArg","isOptional":true,"id":"arg6","name":"arg6","kind":"param","line":"1458"},{"defaultValue":"_noArg","isOptional":true,"id":"arg7","name":"arg7","kind":"param","line":"1459"},{"defaultValue":"_noArg","isOptional":true,"id":"arg8","name":"arg8","kind":"param","line":"1460"},{"defaultValue":"_noArg","isOptional":true,"id":"arg9","name":"arg9","kind":"param","line":"1461"}],"kind":"method","comment":"\nUseful shorthand method that creates a [CallMatcher] from its arguments\nand then calls [getLogs].\n","line":"1451"},{"returnType":{"name":"void","refId":"void"},"id":"resetBehavior0()","name":"resetBehavior","kind":"method","comment":"Clear the behaviors for the Mock. ","line":"1466"},{"returnType":{"name":"void","refId":"void"},"id":"clearLogs0()","name":"clearLogs","kind":"method","comment":"Clear the logs for the Mock. ","line":"1469"},{"returnType":{"name":"void","refId":"void"},"id":"reset0()","name":"reset","kind":"method","comment":"Clear both logs and behavior. ","line":"1480"},{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"logging","name":"logging","kind":"property","line":"1228"},{"isFinal":true,"ref":{"name":"String","refId":"dart.core/String"},"id":"name","name":"name","kind":"variable","line":"1214"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"Behavior","refId":"mock/Behavior"}]},"id":"_behaviors","name":"_behaviors","kind":"variable","isPrivate":true,"line":"1217"},{"ref":{"name":"LogEntryList","refId":"mock/LogEntryList"},"id":"log","name":"log","kind":"variable","line":"1220"},{"isFinal":true,"ref":{"name":"bool","refId":"dart.core/bool"},"id":"_throwIfNoBehavior","name":"_throwIfNoBehavior","kind":"variable","isPrivate":true,"line":"1223"},{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"_logging","name":"_logging","kind":"variable","isPrivate":true,"line":"1226"},{"id":"Mock0()","name":"Mock","kind":"constructor","comment":"\nDefault constructor. Unknown method calls are allowed and logged,\nthe mock has no name, and has its own log.\n","line":"1240"},{"id":"Mock.custom4()","name":"Mock.custom","children":[{"initializedField":{"name":"name","refId":"mock/Mock/name"},"ref":{"name":"String","refId":"dart.core/String"},"isNamed":true,"isOptional":true,"id":"name","name":"name","kind":"param"},{"initializedField":{"name":"log","refId":"mock/Mock/log"},"ref":{"name":"LogEntryList","refId":"mock/LogEntryList"},"isNamed":true,"isOptional":true,"id":"log","name":"log","kind":"param","line":"1254"},{"isNamed":true,"defaultValue":"false","isOptional":true,"id":"throwIfNoBehavior","name":"throwIfNoBehavior","kind":"param","line":"1255"},{"isNamed":true,"defaultValue":"true","isOptional":true,"id":"enableLogging","name":"enableLogging","kind":"param","line":"1256"}],"kind":"constructor","comment":"\nThis constructor makes a mock that has a [name] and possibly uses\na shared [log]. If [throwIfNoBehavior] is true, any calls to methods\nthat have no defined behaviors will throw an exception; otherwise they\nwill be allowed and logged (but will not do anything).\nIf [enableLogging] is false, no logging will be done initially (whether\nor not a [log] is supplied), but [logging] can be set to true later.\n","line":"1253"}],"kind":"class","comment":"The base class for all mocked objects. ","line":"1212"},{"superclass":{"name":"BaseMatcher","refId":"matcher/BaseMatcher"},"id":"_ResultSetMatcher","name":"_ResultSetMatcher","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"matches2()","name":"matches","children":[{"id":"logList","name":"logList","kind":"param"},{"ref":{"name":"MatchState","refId":"matcher/MatchState"},"id":"matchState","name":"matchState","kind":"param"}],"kind":"method","line":"1101"},{"returnType":{"name":"Description","refId":"matcher/Description"},"id":"describe1()","name":"describe","children":[{"ref":{"name":"Description","refId":"matcher/Description"},"id":"description","name":"description","kind":"param"}],"kind":"method","line":"1135"},{"returnType":{"name":"Description","refId":"matcher/Description"},"id":"describeMismatch4()","name":"describeMismatch","children":[{"id":"logList","name":"logList","kind":"param"},{"ref":{"name":"Description","refId":"matcher/Description"},"id":"mismatchDescription","name":"mismatchDescription","kind":"param"},{"ref":{"name":"MatchState","refId":"matcher/MatchState"},"id":"matchState","name":"matchState","kind":"param","line":"1147"},{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"verbose","name":"verbose","kind":"param","line":"1147"}],"kind":"method","line":"1146"},{"isFinal":true,"ref":{"name":"Action","refId":"mock/Action"},"id":"action","name":"action","kind":"variable","line":"1095"},{"isFinal":true,"ref":{"name":"Matcher","refId":"matcher/Matcher"},"id":"value","name":"value","kind":"variable","line":"1096"},{"isFinal":true,"ref":{"name":"_Frequency","refId":"mock/_Frequency"},"id":"frequency","name":"frequency","kind":"variable","line":"1097"},{"id":"_ResultSetMatcher3()","name":"_ResultSetMatcher","children":[{"initializedField":{"name":"action","refId":"mock/_ResultSetMatcher/action"},"ref":{"name":"Action","refId":"mock/Action"},"id":"action","name":"action","kind":"param"},{"initializedField":{"name":"value","refId":"mock/_ResultSetMatcher/value"},"ref":{"name":"Matcher","refId":"matcher/Matcher"},"id":"value","name":"value","kind":"param"},{"initializedField":{"name":"frequency","refId":"mock/_ResultSetMatcher/frequency"},"ref":{"name":"_Frequency","refId":"mock/_Frequency"},"id":"frequency","name":"frequency","kind":"param"}],"kind":"constructor","line":"1099"}],"kind":"class","comment":"\n[_ResultSetMatcher]s are used to make assertions about the results\nof method calls. When filtering an execution log by calling\n[getLogs], a [LogEntrySet] of matching call logs is returned;\n[_ResultSetMatcher]s can then assert various things about this\n(sub)set of logs.\n\nWe could make this class use _ResultMatcher but it doesn't buy that\nmatch and adds some perf hit, so there is some duplication here.\n","isPrivate":true,"line":"1094"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"id":"_Frequency","name":"_Frequency","children":[{"isStatic":true,"id":"ALL","name":"ALL","kind":"variable","line":"1071"},{"isStatic":true,"id":"SOME","name":"SOME","kind":"variable","line":"1074"},{"isStatic":true,"id":"NONE","name":"NONE","kind":"variable","line":"1077"},{"isFinal":true,"ref":{"name":"String","refId":"dart.core/String"},"id":"name","name":"name","kind":"variable","line":"1081"},{"id":"_Frequency._1()","name":"_Frequency._","children":[{"initializedField":{"name":"name","refId":"mock/_Frequency/name"},"ref":{"name":"String","refId":"dart.core/String"},"id":"name","name":"name","kind":"param"}],"kind":"constructor","isPrivate":true,"line":"1079"}],"kind":"class","comment":"Special values for use with [_ResultSetMatcher] [frequency]. ","isPrivate":true,"line":"1069"},{"superclass":{"name":"BaseMatcher","refId":"matcher/BaseMatcher"},"id":"_ResultMatcher","name":"_ResultMatcher","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"matches2()","name":"matches","children":[{"id":"item","name":"item","kind":"param"},{"ref":{"name":"MatchState","refId":"matcher/MatchState"},"id":"matchState","name":"matchState","kind":"param"}],"kind":"method","line":"1021"},{"returnType":{"name":"Description","refId":"matcher/Description"},"id":"describe1()","name":"describe","children":[{"ref":{"name":"Description","refId":"matcher/Description"},"id":"description","name":"description","kind":"param"}],"kind":"method","line":"1033"},{"returnType":{"name":"Description","refId":"matcher/Description"},"id":"describeMismatch4()","name":"describeMismatch","children":[{"id":"item","name":"item","kind":"param"},{"ref":{"name":"Description","refId":"matcher/Description"},"id":"mismatchDescription","name":"mismatchDescription","kind":"param"},{"ref":{"name":"MatchState","refId":"matcher/MatchState"},"id":"matchState","name":"matchState","kind":"param","line":"1043"},{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"verbose","name":"verbose","kind":"param","line":"1043"}],"kind":"method","line":"1042"},{"isFinal":true,"ref":{"name":"Action","refId":"mock/Action"},"id":"action","name":"action","kind":"variable","line":"1016"},{"isFinal":true,"ref":{"name":"Matcher","refId":"matcher/Matcher"},"id":"value","name":"value","kind":"variable","line":"1017"},{"id":"_ResultMatcher2()","name":"_ResultMatcher","children":[{"initializedField":{"name":"action","refId":"mock/_ResultMatcher/action"},"ref":{"name":"Action","refId":"mock/Action"},"id":"action","name":"action","kind":"param"},{"initializedField":{"name":"value","refId":"mock/_ResultMatcher/value"},"ref":{"name":"Matcher","refId":"matcher/Matcher"},"id":"value","name":"value","kind":"param"}],"kind":"constructor","line":"1019"}],"kind":"class","comment":"\n[_ResultMatcher]s are used to make assertions about the results\nof method calls. These can be used as optional parameters to [getLogs].\n","isPrivate":true,"line":"1015"},{"superclass":{"name":"BaseMatcher","refId":"matcher/BaseMatcher"},"id":"_TimesMatcher","name":"_TimesMatcher","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"matches2()","name":"matches","children":[{"id":"logList","name":"logList","kind":"param"},{"ref":{"name":"MatchState","refId":"matcher/MatchState"},"id":"matchState","name":"matchState","kind":"param"}],"kind":"method","line":"962"},{"returnType":{"name":"Description","refId":"matcher/Description"},"id":"describe1()","name":"describe","children":[{"ref":{"name":"Description","refId":"matcher/Description"},"id":"description","name":"description","kind":"param"}],"kind":"method","line":"965"},{"returnType":{"name":"Description","refId":"matcher/Description"},"id":"describeMismatch4()","name":"describeMismatch","children":[{"id":"logList","name":"logList","kind":"param"},{"ref":{"name":"Description","refId":"matcher/Description"},"id":"mismatchDescription","name":"mismatchDescription","kind":"param"},{"ref":{"name":"MatchState","refId":"matcher/MatchState"},"id":"matchState","name":"matchState","kind":"param","line":"980"},{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"verbose","name":"verbose","kind":"param","line":"980"}],"kind":"method","line":"979"},{"isFinal":true,"ref":{"name":"int","refId":"dart.core/int"},"id":"min","name":"min","kind":"variable","line":"958"},{"isFinal":true,"ref":{"name":"int","refId":"dart.core/int"},"id":"max","name":"max","kind":"variable","line":"958"},{"id":"_TimesMatcher2()","name":"_TimesMatcher","children":[{"initializedField":{"name":"min","refId":"mock/_TimesMatcher/min"},"ref":{"name":"int","refId":"dart.core/int"},"id":"min","name":"min","kind":"param"},{"initializedField":{"name":"max","refId":"mock/_TimesMatcher/max"},"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"-1","isOptional":true,"id":"max","name":"max","kind":"param"}],"kind":"constructor","line":"960"}],"kind":"class","comment":"\n[_TimesMatcher]s are used to make assertions about the number of\ntimes a method was called.\n","isPrivate":true,"line":"957"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"id":"LogEntryList","name":"LogEntryList","children":[{"id":"add1()","name":"add","children":[{"ref":{"name":"LogEntry","refId":"mock/LogEntry"},"id":"entry","name":"entry","kind":"param"}],"kind":"method","comment":"Add a [LogEntry] to the log. ","line":"462"},{"returnType":{"name":"Function","refId":"dart.core/Function"},"id":"_makePredicate1()","name":"_makePredicate","children":[{"id":"arg","name":"arg","kind":"param"}],"kind":"method","comment":"Creates a LogEntry predicate function from the argument. ","isPrivate":true,"line":"471"},{"returnType":{"name":"LogEntryList","refId":"mock/LogEntryList"},"id":"getMatches4()","name":"getMatches","children":[{"isOptional":true,"id":"mockNameFilter","name":"mockNameFilter","kind":"param"},{"isOptional":true,"id":"logFilter","name":"logFilter","kind":"param","line":"496"},{"ref":{"name":"Matcher","refId":"matcher/Matcher"},"isOptional":true,"id":"actionMatcher","name":"actionMatcher","kind":"param","line":"497"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"id":"destructive","name":"destructive","kind":"param","line":"498"}],"kind":"method","comment":"\nCreate a new [LogEntryList] consisting of [LogEntry]s from\nthis list that match the specified [mockNameFilter] and [logFilter].\n[mockNameFilter] can be null, a [String], a predicate [Function],\nor a [Matcher]. If [mockNameFilter] is null, this is the same as\n[anything].\nIf [logFilter] is null, all entries in the log will be returned.\nOtherwise [logFilter] should be a [CallMatcher] or  predicate function\nthat takes a [LogEntry] and returns a bool.\nIf [destructive] is true, the log entries are removed from the\noriginal list.\n","line":"495"},{"returnType":{"name":"LogEntryList","refId":"mock/LogEntryList"},"id":"verify1()","name":"verify","children":[{"ref":{"name":"Matcher","refId":"matcher/Matcher"},"id":"matcher","name":"matcher","kind":"param"}],"kind":"method","comment":"Apply a unit test [Matcher] to the [LogEntryList]. ","line":"525"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"stepwiseValidate2()","name":"stepwiseValidate","children":[{"ref":{"name":"StepValidator","refId":"mock/StepValidator"},"id":"validator","name":"validator","kind":"param"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"''","isOptional":true,"id":"reason","name":"reason","kind":"param"}],"kind":"method","comment":"\nIterate through the list and call the [validator] function with the\nlog [List] and position. The [validator] should return the number of\npositions to advance upon success, or zero upon failure. When zero is\nreturned an error is reported. [reason] can be used to provide a\nmore descriptive failure message. If a failure occurred false will be\nreturned (unless the failure handler itself threw an exception);\notherwise true is returned.\nThe use case here is to perform more complex validations; for example\nwe may want to assert that the return value from some function is\nlater used as a parameter to a following function. If we filter the logs\nto include just these two functions we can write a simple validator to\ndo this check.\n","line":"548"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"toString1()","name":"toString","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"isOptional":true,"id":"baseTime","name":"baseTime","kind":"param"}],"kind":"method","comment":"\nTurn the logs into human-readable text. If [baseTime] is specified\nthen each entry is prefixed with the offset from that time in\nmilliseconds; otherwise the time of day is used.\n","line":"575"},{"returnType":{"name":"int","refId":"dart.core/int"},"id":"findLogEntry4()","name":"findLogEntry","children":[{"id":"logFilter","name":"logFilter","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"id":"start","name":"start","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"-1","isOptional":true,"id":"failureReturnValue","name":"failureReturnValue","kind":"param"},{"defaultValue":"1","isOptional":true,"id":"skip","name":"skip","kind":"param","line":"595"}],"kind":"method","comment":"\n Find the first log entry that satisfies [logFilter] and\n return its position. A search [start] position can be provided\n to allow for repeated searches. [logFilter] can be a [CallMatcher],\n or a predicate function that takes a [LogEntry] argument and returns\n a bool. If [logFilter] is null, it will match any [LogEntry].\n If no entry is found, then [failureReturnValue] is returned.\n After each check the position is updated by [skip], so using\n [skip] of -1 allows backward searches, using a [skip] of 2 can\n be used to check pairs of adjacent entries, and so on.\n","line":"594"},{"returnType":{"name":"LogEntryList","refId":"mock/LogEntryList"},"id":"_head4()","name":"_head","children":[{"id":"logFilter","name":"logFilter","kind":"param"},{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"inPlace","name":"inPlace","kind":"param"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"description","name":"description","kind":"param","line":"617"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"defaultPosition","name":"defaultPosition","kind":"param","line":"617"}],"kind":"method","comment":"\nReturns log events that happened up to the first one that\nsatisfies [logFilter]. If [inPlace] is true, then returns\nthis LogEntryList after removing the from the first satisfier;\nonwards otherwise a new list is created. [description]\nis used to create a new name for the resulting list.\n[defaultPosition] is used as the index of the matching item in\nthe case that no match is found.\n","isPrivate":true,"line":"616"},{"returnType":{"name":"LogEntryList","refId":"mock/LogEntryList"},"id":"_tail4()","name":"_tail","children":[{"id":"logFilter","name":"logFilter","kind":"param"},{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"inPlace","name":"inPlace","kind":"param"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"description","name":"description","kind":"param","line":"647"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"defaultPosition","name":"defaultPosition","kind":"param","line":"647"}],"kind":"method","comment":"\nReturns log events that happened from the first one that\nsatisfies [logFilter]. If [inPlace] is true, then returns\nthis LogEntryList after removing the entries up to the first\nsatisfier; otherwise a new list is created. [description]\nis used to create a new name for the resulting list.\n[defaultPosition] is used as the index of the matching item in\nthe case that no match is found.\n","isPrivate":true,"line":"646"},{"returnType":{"name":"LogEntryList","refId":"mock/LogEntryList"},"id":"after2()","name":"after","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"id":"when","name":"when","kind":"param"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"id":"inPlace","name":"inPlace","kind":"param"}],"kind":"method","comment":"\nReturns log events that happened after [when]. If [inPlace]\nis true, then it returns this LogEntryList after removing\nthe entries that happened up to [when]; otherwise a new\nlist is created.\n","line":"673"},{"returnType":{"name":"LogEntryList","refId":"mock/LogEntryList"},"id":"from2()","name":"from","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"id":"when","name":"when","kind":"param"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"id":"inPlace","name":"inPlace","kind":"param"}],"kind":"method","comment":"\nReturns log events that happened from [when] onwards. If\n[inPlace] is true, then it returns this LogEntryList after\nremoving the entries that happened before [when]; otherwise\na new list is created.\n","line":"682"},{"returnType":{"name":"LogEntryList","refId":"mock/LogEntryList"},"id":"until2()","name":"until","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"id":"when","name":"when","kind":"param"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"id":"inPlace","name":"inPlace","kind":"param"}],"kind":"method","comment":"\nReturns log events that happened until [when]. If [inPlace]\nis true, then it returns this LogEntryList after removing\nthe entries that happened after [when]; otherwise a new\nlist is created.\n","line":"691"},{"returnType":{"name":"LogEntryList","refId":"mock/LogEntryList"},"id":"before2()","name":"before","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"id":"when","name":"when","kind":"param"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"id":"inPlace","name":"inPlace","kind":"param"}],"kind":"method","comment":"\nReturns log events that happened before [when]. If [inPlace]\nis true, then it returns this LogEntryList after removing\nthe entries that happened from [when] onwards; otherwise a new\nlist is created.\n","line":"700"},{"returnType":{"name":"LogEntryList","refId":"mock/LogEntryList"},"id":"afterEntry2()","name":"afterEntry","children":[{"ref":{"name":"LogEntry","refId":"mock/LogEntry"},"id":"logEntry","name":"logEntry","kind":"param"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"id":"inPlace","name":"inPlace","kind":"param"}],"kind":"method","comment":"\nReturns log events that happened after [logEntry]'s time.\nIf [inPlace] is true, then it returns this LogEntryList after\nremoving the entries that happened up to [when]; otherwise a new\nlist is created. If [logEntry] is null the current time is used.\n","line":"709"},{"returnType":{"name":"LogEntryList","refId":"mock/LogEntryList"},"id":"fromEntry2()","name":"fromEntry","children":[{"ref":{"name":"LogEntry","refId":"mock/LogEntry"},"id":"logEntry","name":"logEntry","kind":"param"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"id":"inPlace","name":"inPlace","kind":"param"}],"kind":"method","comment":"\nReturns log events that happened from [logEntry]'s time onwards.\nIf [inPlace] is true, then it returns this LogEntryList after\nremoving the entries that happened before [when]; otherwise\na new list is created. If [logEntry] is null the current time is used.\n","line":"718"},{"returnType":{"name":"LogEntryList","refId":"mock/LogEntryList"},"id":"untilEntry2()","name":"untilEntry","children":[{"ref":{"name":"LogEntry","refId":"mock/LogEntry"},"id":"logEntry","name":"logEntry","kind":"param"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"id":"inPlace","name":"inPlace","kind":"param"}],"kind":"method","comment":"\nReturns log events that happened until [logEntry]'s time. If\n[inPlace] is true, then it returns this LogEntryList after removing\nthe entries that happened after [when]; otherwise a new\nlist is created. If [logEntry] is null the epoch time is used.\n","line":"727"},{"returnType":{"name":"LogEntryList","refId":"mock/LogEntryList"},"id":"beforeEntry2()","name":"beforeEntry","children":[{"ref":{"name":"LogEntry","refId":"mock/LogEntry"},"id":"logEntry","name":"logEntry","kind":"param"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"id":"inPlace","name":"inPlace","kind":"param"}],"kind":"method","comment":"\nReturns log events that happened before [logEntry]'s time. If\n[inPlace] is true, then it returns this LogEntryList after removing\nthe entries that happened from [when] onwards; otherwise a new\nlist is created. If [logEntry] is null the epoch time is used.\n","line":"737"},{"returnType":{"name":"LogEntryList","refId":"mock/LogEntryList"},"id":"afterFirst2()","name":"afterFirst","children":[{"ref":{"name":"LogEntryList","refId":"mock/LogEntryList"},"id":"segment","name":"segment","kind":"param"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"id":"inPlace","name":"inPlace","kind":"param"}],"kind":"method","comment":"\nReturns log events that happened after the first event in [segment].\nIf [inPlace] is true, then it returns this LogEntryList after removing\nthe entries that happened earlier; otherwise a new list is created.\n","line":"746"},{"returnType":{"name":"LogEntryList","refId":"mock/LogEntryList"},"id":"afterLast2()","name":"afterLast","children":[{"ref":{"name":"LogEntryList","refId":"mock/LogEntryList"},"id":"segment","name":"segment","kind":"param"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"id":"inPlace","name":"inPlace","kind":"param"}],"kind":"method","comment":"\nReturns log events that happened after the last event in [segment].\nIf [inPlace] is true, then it returns this LogEntryList after removing\nthe entries that happened earlier; otherwise a new list is created.\n","line":"754"},{"returnType":{"name":"LogEntryList","refId":"mock/LogEntryList"},"id":"fromFirst2()","name":"fromFirst","children":[{"ref":{"name":"LogEntryList","refId":"mock/LogEntryList"},"id":"segment","name":"segment","kind":"param"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"id":"inPlace","name":"inPlace","kind":"param"}],"kind":"method","comment":"\nReturns log events that happened from the time of the first event in\n[segment] onwards. If [inPlace] is true, then it returns this\nLogEntryList after removing the earlier entries; otherwise a new list\nis created.\n","line":"763"},{"returnType":{"name":"LogEntryList","refId":"mock/LogEntryList"},"id":"fromLast2()","name":"fromLast","children":[{"ref":{"name":"LogEntryList","refId":"mock/LogEntryList"},"id":"segment","name":"segment","kind":"param"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"id":"inPlace","name":"inPlace","kind":"param"}],"kind":"method","comment":"\nReturns log events that happened from the time of the last event in\n[segment] onwards. If [inPlace] is true, then it returns this\nLogEntryList after removing the earlier entries; otherwise a new list\nis created.\n","line":"772"},{"returnType":{"name":"LogEntryList","refId":"mock/LogEntryList"},"id":"untilFirst2()","name":"untilFirst","children":[{"ref":{"name":"LogEntryList","refId":"mock/LogEntryList"},"id":"segment","name":"segment","kind":"param"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"id":"inPlace","name":"inPlace","kind":"param"}],"kind":"method","comment":"\nReturns log events that happened until the first event in [segment].\nIf [inPlace] is true, then it returns this LogEntryList after removing\nthe entries that happened later; otherwise a new list is created.\n","line":"780"},{"returnType":{"name":"LogEntryList","refId":"mock/LogEntryList"},"id":"untilLast2()","name":"untilLast","children":[{"ref":{"name":"LogEntryList","refId":"mock/LogEntryList"},"id":"segment","name":"segment","kind":"param"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"id":"inPlace","name":"inPlace","kind":"param"}],"kind":"method","comment":"\nReturns log events that happened until the last event in [segment].\nIf [inPlace] is true, then it returns this LogEntryList after removing\nthe entries that happened later; otherwise a new list is created.\n","line":"788"},{"returnType":{"name":"LogEntryList","refId":"mock/LogEntryList"},"id":"beforeFirst2()","name":"beforeFirst","children":[{"ref":{"name":"LogEntryList","refId":"mock/LogEntryList"},"id":"segment","name":"segment","kind":"param"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"id":"inPlace","name":"inPlace","kind":"param"}],"kind":"method","comment":"\nReturns log events that happened before the first event in [segment].\nIf [inPlace] is true, then it returns this LogEntryList after removing\nthe entries that happened later; otherwise a new list is created.\n","line":"796"},{"returnType":{"name":"LogEntryList","refId":"mock/LogEntryList"},"id":"beforeLast2()","name":"beforeLast","children":[{"ref":{"name":"LogEntryList","refId":"mock/LogEntryList"},"id":"segment","name":"segment","kind":"param"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"id":"inPlace","name":"inPlace","kind":"param"}],"kind":"method","comment":"\nReturns log events that happened before the last event in [segment].\nIf [inPlace] is true, then it returns this LogEntryList after removing\nthe entries that happened later; otherwise a new list is created.\n","line":"804"},{"returnType":{"name":"LogEntryList","refId":"mock/LogEntryList"},"id":"_neighboring6()","name":"_neighboring","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"isPreceding","name":"isPreceding","kind":"param"},{"ref":{"name":"LogEntryList","refId":"mock/LogEntryList"},"id":"keys","name":"keys","kind":"param","line":"818"},{"id":"mockNameFilter","name":"mockNameFilter","kind":"param","line":"819"},{"id":"logFilter","name":"logFilter","kind":"param","line":"820"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"distance","name":"distance","kind":"param","line":"821"},{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"includeKeys","name":"includeKeys","kind":"param","line":"822"}],"kind":"method","comment":"\nIterate through the LogEntryList looking for matches to the entries\nin [keys]; for each match found the closest [distance] neighboring log\nentries that match [mockNameFilter] and [logFilter] will be included in\nthe result. If [isPreceding] is true we use the neighbors that precede\nthe matched entry; else we use the neighbors that followed.\nIf [includeKeys] is true then the entries in [keys] that resulted in\nentries in the output list are themselves included in the output list. If\n[distance] is zero then all matches are included.\n","isPrivate":true,"line":"817"},{"returnType":{"name":"LogEntryList","refId":"mock/LogEntryList"},"id":"preceding5()","name":"preceding","children":[{"ref":{"name":"LogEntryList","refId":"mock/LogEntryList"},"id":"keys","name":"keys","kind":"param"},{"isNamed":true,"defaultValue":"null","isOptional":true,"id":"mockNameFilter","name":"mockNameFilter","kind":"param","line":"928"},{"isNamed":true,"defaultValue":"null","isOptional":true,"id":"logFilter","name":"logFilter","kind":"param","line":"929"},{"ref":{"name":"int","refId":"dart.core/int"},"isNamed":true,"defaultValue":"1","isOptional":true,"id":"distance","name":"distance","kind":"param","line":"930"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isNamed":true,"defaultValue":"false","isOptional":true,"id":"includeKeys","name":"includeKeys","kind":"param","line":"931"}],"kind":"method","comment":"\nIterate through the LogEntryList looking for matches to the entries\nin [keys]; for each match found the closest [distance] prior log entries\nthat match [mocknameFilter] and [logFilter] will be included in the result.\nIf [includeKeys] is true then the entries in [keys] that resulted in\nentries in the output list are themselves included in the output list. If\n[distance] is zero then all matches are included.\n\nThe idea here is that you could find log entries that are related to\nother logs entries in some temporal sense. For example, say we have a\nmethod commit() that returns -1 on failure. Before commit() gets called\nthe value being committed is created by process(). We may want to find\nthe calls to process() that preceded calls to commit() that failed.\nWe could do this with:\n\n     print(log.preceding(log.getLogs(callsTo('commit'), returning(-1)),\n         logFilter: callsTo('process')).toString());\n\nWe might want to include the details of the failing calls to commit()\nto see what parameters were passed in, in which case we would set\n[includeKeys].\n\nAs another simple example, say we wanted to know the three method\ncalls that immediately preceded each failing call to commit():\n\n    print(log.preceding(log.getLogs(callsTo('commit'), returning(-1)),\n        distance: 3).toString());\n","line":"927"},{"returnType":{"name":"LogEntryList","refId":"mock/LogEntryList"},"id":"following5()","name":"following","children":[{"ref":{"name":"LogEntryList","refId":"mock/LogEntryList"},"id":"keys","name":"keys","kind":"param"},{"isNamed":true,"defaultValue":"null","isOptional":true,"id":"mockNameFilter","name":"mockNameFilter","kind":"param","line":"945"},{"isNamed":true,"defaultValue":"null","isOptional":true,"id":"logFilter","name":"logFilter","kind":"param","line":"946"},{"ref":{"name":"int","refId":"dart.core/int"},"isNamed":true,"defaultValue":"1","isOptional":true,"id":"distance","name":"distance","kind":"param","line":"947"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isNamed":true,"defaultValue":"false","isOptional":true,"id":"includeKeys","name":"includeKeys","kind":"param","line":"948"}],"kind":"method","comment":"\nIterate through the LogEntryList looking for matches to the entries\nin [keys]; for each match found the closest [distance] subsequent log\nentries that match [mocknameFilter] and [logFilter] will be included in\nthe result. If [includeKeys] is true then the entries in [keys] that\nresulted in entries in the output list are themselves included in the\noutput list. If [distance] is zero then all matches are included.\nSee [preceding] for a usage example.\n","line":"944"},{"id":"first","name":"first","kind":"property","comment":"Get the first entry, or null if no entries. ","line":"465"},{"id":"last","name":"last","kind":"property","comment":"Get the last entry, or null if no entries. ","line":"468"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"filter","name":"filter","kind":"variable","line":"455"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"LogEntry","refId":"mock/LogEntry"}]},"id":"logs","name":"logs","kind":"variable","line":"456"},{"id":"LogEntryList1()","name":"LogEntryList","children":[{"initializedField":{"name":"filter","refId":"mock/LogEntryList/filter"},"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"id":"filter","name":"filter","kind":"param"}],"kind":"constructor","line":"457"}],"kind":"class","comment":"\nWe do verification on a list of [LogEntry]s. To allow chaining\nof calls to verify, we encapsulate such a list in the [LogEntryList]\nclass.\n","line":"454"},{"returnType":{"name":"int","refId":"dart.core/int"},"id":"StepValidator","name":"StepValidator","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"LogEntry","refId":"mock/LogEntry"}]},"id":"logs","name":"logs","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"pos","name":"pos","kind":"param"}],"kind":"typedef","comment":"\n[StepValidator]s are used by [stepwiseValidate] in [LogEntryList], which\niterates through the list and call the [StepValidator] function with the\nlog [List] and position. The [StepValidator] should return the number of\npositions to advance upon success, or zero upon failure. When zero is\nreturned an error is reported.\n","line":"447"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"id":"LogEntry","name":"LogEntry","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"id":"_pad21()","name":"_pad2","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"val","name":"val","kind":"param"}],"kind":"method","isPrivate":true,"line":"397"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"toString1()","name":"toString","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"isOptional":true,"id":"baseTime","name":"baseTime","kind":"param"}],"kind":"method","line":"399"},{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"id":"time","name":"time","kind":"variable","line":"375"},{"isFinal":true,"ref":{"name":"String","refId":"dart.core/String"},"id":"mockName","name":"mockName","kind":"variable","line":"378"},{"isFinal":true,"ref":{"name":"String","refId":"dart.core/String"},"id":"methodName","name":"methodName","kind":"variable","line":"381"},{"isFinal":true,"ref":{"name":"List","refId":"dart.core/List"},"id":"args","name":"args","kind":"variable","line":"384"},{"isFinal":true,"ref":{"name":"Action","refId":"mock/Action"},"id":"action","name":"action","kind":"variable","line":"387"},{"isFinal":true,"id":"value","name":"value","kind":"variable","line":"390"},{"id":"LogEntry5()","name":"LogEntry","children":[{"initializedField":{"name":"mockName","refId":"mock/LogEntry/mockName"},"ref":{"name":"String","refId":"dart.core/String"},"id":"mockName","name":"mockName","kind":"param"},{"initializedField":{"name":"methodName","refId":"mock/LogEntry/methodName"},"ref":{"name":"String","refId":"dart.core/String"},"id":"methodName","name":"methodName","kind":"param"},{"initializedField":{"name":"args","refId":"mock/LogEntry/args"},"ref":{"name":"List","refId":"dart.core/List"},"id":"args","name":"args","kind":"param","line":"393"},{"initializedField":{"name":"action","refId":"mock/LogEntry/action"},"ref":{"name":"Action","refId":"mock/Action"},"id":"action","name":"action","kind":"param","line":"393"},{"initializedField":{"name":"value","refId":"mock/LogEntry/value"},"isOptional":true,"id":"value","name":"value","kind":"param","line":"393"}],"kind":"constructor","line":"392"}],"kind":"class","comment":"\nEvery call to a [Mock] object method is logged. The logs are\nkept in instances of [LogEntry].\n","line":"373"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"id":"Behavior","name":"Behavior","children":[{"returnType":{"name":"Behavior","refId":"mock/Behavior"},"id":"thenReturn2()","name":"thenReturn","children":[{"id":"value","name":"value","kind":"param"},{"defaultValue":"1","isOptional":true,"id":"count","name":"count","kind":"param"}],"kind":"method","comment":"\nAdds a [Responder] that returns a [value] for [count] calls\n(1 by default).\n","line":"312"},{"returnType":{"name":"Behavior","refId":"mock/Behavior"},"id":"alwaysReturn1()","name":"alwaysReturn","children":[{"id":"value","name":"value","kind":"param"}],"kind":"method","comment":"Adds a [Responder] that repeatedly returns a [value]. ","line":"318"},{"returnType":{"name":"Behavior","refId":"mock/Behavior"},"id":"thenThrow2()","name":"thenThrow","children":[{"id":"value","name":"value","kind":"param"},{"defaultValue":"1","isOptional":true,"id":"count","name":"count","kind":"param"}],"kind":"method","comment":"\nAdds a [Responder] that throws [value] [count]\ntimes (1 by default).\n","line":"326"},{"returnType":{"name":"Behavior","refId":"mock/Behavior"},"id":"alwaysThrow1()","name":"alwaysThrow","children":[{"id":"value","name":"value","kind":"param"}],"kind":"method","comment":"Adds a [Responder] that throws [value] endlessly. ","line":"332"},{"returnType":{"name":"Behavior","refId":"mock/Behavior"},"id":"thenCall2()","name":"thenCall","children":[{"id":"value","name":"value","kind":"param"},{"defaultValue":"1","isOptional":true,"id":"count","name":"count","kind":"param"}],"kind":"method","comment":"\n[thenCall] creates a proxy Responder, that is called [count]\ntimes (1 by default; 0 is used for unlimited calls, and is\nexposed as [alwaysCall]). [value] is the function that will\nbe called with the same arguments that were passed to the\nmock. Proxies can be used to wrap real objects or to define\nmore complex return/throw behavior. You could even (if you\nwanted) use proxies to emulate the behavior of thenReturn;\ne.g.:\n\n    m.when(callsTo('foo')).thenReturn(0)\n\nis equivalent to:\n\n    m.when(callsTo('foo')).thenCall(() => 0)\n","line":"352"},{"returnType":{"name":"Behavior","refId":"mock/Behavior"},"id":"alwaysCall1()","name":"alwaysCall","children":[{"id":"value","name":"value","kind":"param"}],"kind":"method","comment":"Creates a repeating proxy call. ","line":"358"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"matches2()","name":"matches","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"method","name":"method","kind":"param"},{"ref":{"name":"List","refId":"dart.core/List"},"id":"args","name":"args","kind":"param"}],"kind":"method","comment":"Returns true if a method call matches the [Behavior]. ","line":"363"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"toString0()","name":"toString","kind":"method","comment":"Returns the [matcher]'s representation. ","line":"366"},{"ref":{"name":"CallMatcher","refId":"mock/CallMatcher"},"id":"matcher","name":"matcher","kind":"variable","line":"300"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Responder","refId":"mock/Responder"}]},"id":"actions","name":"actions","kind":"variable","line":"301"},{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"logging","name":"logging","kind":"variable","line":"302"},{"id":"Behavior1()","name":"Behavior","children":[{"initializedField":{"name":"matcher","refId":"mock/Behavior/matcher"},"ref":{"name":"CallMatcher","refId":"mock/CallMatcher"},"id":"matcher","name":"matcher","kind":"param"}],"kind":"constructor","line":"304"}],"kind":"class","comment":"\nA [Behavior] represents how a [Mock] will respond to one particular\ntype of method call.\n","line":"299"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"id":"CallMatcher","name":"CallMatcher","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"id":"toString0()","name":"toString","kind":"method","comment":"\nWe keep our behavior specifications in a Map, which is keyed\nby the [CallMatcher]. To make the keys unique and to get a\ndescriptive value for the [CallMatcher] we have this override\nof [toString()].\n","line":"232"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"matches2()","name":"matches","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"method","name":"method","kind":"param"},{"ref":{"name":"List","refId":"dart.core/List"},"id":"arguments","name":"arguments","kind":"param"}],"kind":"method","comment":"\nGiven a [method] name and list of [arguments], return true\nif it matches this [CallMatcher.\n","line":"253"},{"ref":{"name":"Matcher","refId":"matcher/Matcher"},"id":"nameFilter","name":"nameFilter","kind":"variable","line":"178"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Matcher","refId":"matcher/Matcher"}]},"id":"argMatchers","name":"argMatchers","kind":"variable","line":"179"},{"id":"CallMatcher11()","name":"CallMatcher","children":[{"isOptional":true,"id":"name","name":"name","kind":"param"},{"defaultValue":"_noArg","isOptional":true,"id":"arg0","name":"arg0","kind":"param","line":"188"},{"defaultValue":"_noArg","isOptional":true,"id":"arg1","name":"arg1","kind":"param","line":"189"},{"defaultValue":"_noArg","isOptional":true,"id":"arg2","name":"arg2","kind":"param","line":"190"},{"defaultValue":"_noArg","isOptional":true,"id":"arg3","name":"arg3","kind":"param","line":"191"},{"defaultValue":"_noArg","isOptional":true,"id":"arg4","name":"arg4","kind":"param","line":"192"},{"defaultValue":"_noArg","isOptional":true,"id":"arg5","name":"arg5","kind":"param","line":"193"},{"defaultValue":"_noArg","isOptional":true,"id":"arg6","name":"arg6","kind":"param","line":"194"},{"defaultValue":"_noArg","isOptional":true,"id":"arg7","name":"arg7","kind":"param","line":"195"},{"defaultValue":"_noArg","isOptional":true,"id":"arg8","name":"arg8","kind":"param","line":"196"},{"defaultValue":"_noArg","isOptional":true,"id":"arg9","name":"arg9","kind":"param","line":"197"}],"kind":"constructor","comment":"\nConstructor for [CallMatcher]. [name] can be null to\nmatch anything, or a literal [String], a predicate [Function],\nor a [Matcher]. The various arguments can be scalar values or\n[Matcher]s.\n","line":"187"}],"kind":"class","comment":"\nA [CallMatcher] is a special matcher used to match method calls (i.e.\na method name and set of arguments). It is not a [Matcher] like the\nunit test [Matcher], but instead represents a method name and a\ncollection of [Matcher]s, one per argument, that will be applied\nto the parameters to decide if the method call is a match.\n","line":"177"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"id":"Responder","name":"Responder","children":[{"id":"value","name":"value","kind":"variable","line":"164"},{"ref":{"name":"Action","refId":"mock/Action"},"id":"action","name":"action","kind":"variable","line":"165"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"count","name":"count","kind":"variable","line":"166"},{"id":"Responder3()","name":"Responder","children":[{"initializedField":{"name":"value","refId":"mock/Responder/value"},"id":"value","name":"value","kind":"param"},{"initializedField":{"name":"count","refId":"mock/Responder/count"},"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"1","isOptional":true,"id":"count","name":"count","kind":"param"},{"initializedField":{"name":"action","refId":"mock/Responder/action"},"ref":{"name":"Action","refId":"mock/Action"},"defaultValue":"Action.RETURN","isOptional":true,"id":"action","name":"action","kind":"param"}],"kind":"constructor","line":"167"}],"kind":"class","comment":"\nThe behavior of a method call in the mock library is specified\nwith [Responder]s. A [Responder] has a [value] to throw\nor return (depending on the type of [action]),\nand can either be one-shot, multi-shot, or infinitely repeating,\ndepending on the value of [count (1, greater than 1, or 0 respectively).\n","line":"163"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"id":"Action","name":"Action","children":[{"isStatic":true,"id":"IGNORE","name":"IGNORE","kind":"variable","line":"140"},{"isStatic":true,"id":"RETURN","name":"RETURN","kind":"variable","line":"143"},{"isStatic":true,"id":"THROW","name":"THROW","kind":"variable","line":"146"},{"isStatic":true,"id":"PROXY","name":"PROXY","kind":"variable","line":"149"},{"isFinal":true,"ref":{"name":"String","refId":"dart.core/String"},"id":"name","name":"name","kind":"variable","line":"153"},{"id":"Action._1()","name":"Action._","children":[{"initializedField":{"name":"name","refId":"mock/Action/name"},"ref":{"name":"String","refId":"dart.core/String"},"id":"name","name":"name","kind":"param"}],"kind":"constructor","isPrivate":true,"line":"151"}],"kind":"class","comment":"The ways in which a call to a mock method can be handled. ","line":"138"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"id":"_Sentinel","name":"_Sentinel","children":[{"id":"_Sentinel0()","name":"_Sentinel","kind":"constructor","line":"133"}],"kind":"class","comment":"Sentinel value for representing no argument. ","isPrivate":true,"line":"132"},{"interfaces":[{"name":"FailureHandler","refId":"matcher/FailureHandler"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"id":"_MockFailureHandler","name":"_MockFailureHandler","children":[{"returnType":{"name":"void","refId":"void"},"id":"fail1()","name":"fail","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"reason","name":"reason","kind":"param"}],"kind":"method","line":"119"},{"returnType":{"name":"void","refId":"void"},"id":"failMatch5()","name":"failMatch","children":[{"id":"actual","name":"actual","kind":"param"},{"ref":{"name":"Matcher","refId":"matcher/Matcher"},"id":"matcher","name":"matcher","kind":"param"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"reason","name":"reason","kind":"param"},{"ref":{"name":"MatchState","refId":"matcher/MatchState"},"id":"matchState","name":"matchState","kind":"param","line":"123"},{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"verbose","name":"verbose","kind":"param","line":"123"}],"kind":"method","line":"122"},{"ref":{"name":"FailureHandler","refId":"matcher/FailureHandler"},"id":"proxy","name":"proxy","kind":"variable","line":"117"},{"id":"_MockFailureHandler1()","name":"_MockFailureHandler","children":[{"initializedField":{"name":"proxy","refId":"mock/_MockFailureHandler/proxy"},"ref":{"name":"FailureHandler","refId":"matcher/FailureHandler"},"id":"proxy","name":"proxy","kind":"param"}],"kind":"constructor","line":"118"}],"kind":"class","comment":"\nThe failure handler for the [expect()] calls that occur in [verify()]\nmethods in the mock objects. This calls the real failure handler used\nby the unit test library after formatting the error message with\nthe custom formatter.\n","isPrivate":true,"line":"116"}],"uri":"dart/pkg/unittest/lib/mock.dart","kind":"library","comment":"\nA simple mocking/spy library.\n\nTo create a mock objects for some class T, create a new class using:\n\n    class MockT extends Mock implements T {};\n\nThen specify the [Behavior] of the Mock for different methods using\n[when] (to select the method and parameters) and then the [Action]s\nfor the [Behavior] by calling [thenReturn], [alwaysReturn], [thenThrow],\n[alwaysThrow], [thenCall] or [alwaysCall].\n\n[thenReturn], [thenThrow] and [thenCall] are one-shot so you would\ntypically call these more than once to specify a sequence of actions;\nthis can be done with chained calls, e.g.:\n\n     m.when(callsTo('foo')).\n         thenReturn(0).thenReturn(1).thenReturn(2);\n\n[thenCall] and [alwaysCall] allow you to proxy mocked methods, chaining\nto some other implementation. This provides a way to implement 'spies'.\n\nFor getters and setters, use \"get foo\" and \"set foo\"-style arguments\nto [callsTo].\n\nYou can disable logging for a particular [Behavior] easily:\n\n    m.when(callsTo('bar')).logging = false;\n\nYou can then use the mock object. Once you are done, to verify the\nbehavior, use [getLogs] to extract a relevant subset of method call\nlogs and apply [Matchers] to these through calling [verify].\n\nA Mock can be given a name when constructed. In this case instead of\nkeeping its own log, it uses a shared log. This can be useful to get an\naudit trail of interleaved behavior. It is the responsibility of the user\nto ensure that mock names, if used, are unique.\n\nLimitations:\n\n* only positional parameters are supported (up to 10);\n* to mock getters you will need to include parentheses in the call\n      (e.g. m.length() will work but not m.length).\n\nHere is a simple example:\n\n    class MockList extends Mock implements List {};\n\n    List m = new MockList();\n    m.when(callsTo('add', anything)).alwaysReturn(0);\n\n    m.add('foo');\n    m.add('bar');\n\n    getLogs(m, callsTo('add', anything)).verify(happenedExactly(2));\n    getLogs(m, callsTo('add', 'foo')).verify(happenedOnce);\n    getLogs(m, callsTo('add', 'isNull)).verify(neverHappened);\n\nNote that we don't need to provide argument matchers for all arguments,\nbut we do need to provide arguments for all matchers. So this is allowed:\n\n    m.when(callsTo('add')).alwaysReturn(0);\n    m.add(1, 2);\n\nBut this is not allowed and will throw an exception:\n\n    m.when(callsTo('add', anything, anything)).alwaysReturn(0);\n    m.add(1);\n\nHere is a way to implement a 'spy', which is where we log the call\nbut then hand it off to some other function, which is the same\nmethod in a real instance of the class being mocked:\n\n    class Foo {\n      bar(a, b, c) => a + b + c;\n    }\n\n    class MockFoo extends Mock implements Foo {\n      Foo real;\n      MockFoo() {\n        real = new Foo();\n        this.when(callsTo('bar')).alwaysCall(real.bar);\n      }\n    }\n\n","line":"92"}