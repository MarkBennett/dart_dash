{"id":"dart.mirrors","name":"dart:mirrors","children":[{"returnType":{"name":"InstanceMirror","refId":"dart.mirrors/InstanceMirror"},"id":"reflect1()","name":"reflect","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"id":"reflectee","name":"reflectee","kind":"param"}],"uri":"dart/sdk/lib/mirrors/mirrors_impl.dart","kind":"method","comment":"\nReturns an [InstanceMirror] for some Dart language object.\n\nThis only works if this mirror system is associated with the\ncurrent running isolate.\n","line":"58"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"MirrorSystem","refId":"dart.mirrors/MirrorSystem"}]},"id":"mirrorSystemOf1()","name":"mirrorSystemOf","children":[{"ref":{"name":"SendPort","refId":"dart.isolate/SendPort"},"id":"port","name":"port","kind":"param"}],"uri":"dart/sdk/lib/mirrors/mirrors_impl.dart","kind":"method","comment":"\nCreates a [MirrorSystem] for the isolate which is listening on\nthe [SendPort].\n","line":"50"},{"returnType":{"name":"MirrorSystem","refId":"dart.mirrors/MirrorSystem"},"id":"currentMirrorSystem0()","name":"currentMirrorSystem","uri":"dart/sdk/lib/mirrors/mirrors_impl.dart","kind":"method","comment":"\nReturns a [MirrorSystem] for the current isolate.\n","line":"44"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"id":"Comment","name":"Comment","children":[{"isFinal":true,"ref":{"name":"String","refId":"dart.core/String"},"id":"text","name":"text","kind":"variable","line":"734"},{"isFinal":true,"ref":{"name":"String","refId":"dart.core/String"},"id":"trimmedText","name":"trimmedText","kind":"variable","line":"742"},{"isFinal":true,"ref":{"name":"bool","refId":"dart.core/bool"},"id":"isDocComment","name":"isDocComment","kind":"variable","line":"750"},{"id":"Comment3()","name":"Comment","children":[{"initializedField":{"name":"text","refId":"dart.mirrors/Comment/text"},"ref":{"name":"String","refId":"dart.core/String"},"id":"text","name":"text","kind":"param"},{"initializedField":{"name":"trimmedText","refId":"dart.mirrors/Comment/trimmedText"},"ref":{"name":"String","refId":"dart.core/String"},"id":"trimmedText","name":"trimmedText","kind":"param"},{"initializedField":{"name":"isDocComment","refId":"dart.mirrors/Comment/isDocComment"},"ref":{"name":"bool","refId":"dart.core/bool"},"id":"isDocComment","name":"isDocComment","kind":"param"}],"kind":"constructor","line":"752"}],"uri":"dart/sdk/lib/mirrors/mirrors_impl.dart","kind":"class","comment":"\nClass used for encoding comments as metadata annotations.\n","line":"730"},{"interfaces":[{"name":"Exception","refId":"dart.core/Exception"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isThrowable":true,"id":"MirrorException","name":"MirrorException","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"id":"toString0()","name":"toString","kind":"method","line":"723"},{"isFinal":true,"ref":{"name":"String","refId":"dart.core/String"},"id":"_message","name":"_message","kind":"variable","isPrivate":true,"line":"724"},{"id":"MirrorException1()","name":"MirrorException","children":[{"initializedField":{"name":"_message","refId":"dart.mirrors/MirrorException/_message"},"ref":{"name":"String","refId":"dart.core/String"},"id":"_message","name":"_message","kind":"param","isPrivate":true}],"kind":"constructor","line":"722"}],"uri":"dart/sdk/lib/mirrors/mirrors_impl.dart","kind":"class","comment":"\nA [MirrorException] is used to indicate errors within the mirrors\nframework.\n","line":"721"},{"superclass":{"name":"MirroredError","refId":"dart.mirrors/MirroredError"},"isThrowable":true,"id":"MirroredCompilationError","name":"MirroredCompilationError","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"id":"toString0()","name":"toString","kind":"method","line":"712"},{"isFinal":true,"ref":{"name":"String","refId":"dart.core/String"},"id":"message","name":"message","kind":"variable","line":"710"},{"id":"MirroredCompilationError1()","name":"MirroredCompilationError","children":[{"initializedField":{"name":"message","refId":"dart.mirrors/MirroredCompilationError/message"},"ref":{"name":"String","refId":"dart.core/String"},"id":"message","name":"message","kind":"param"}],"kind":"constructor","line":"708"}],"uri":"dart/sdk/lib/mirrors/mirrors_impl.dart","kind":"class","comment":"\nWhen a compile-time error occurs during the mirrored execution\nof code, a [MirroredCompilationError] is thrown.\n\nThis exception includes the compile-time error message that would\nhave been displayed to the user, if the function had not been\ninvoked via mirror.\n","line":"707"},{"superclass":{"name":"MirroredError","refId":"dart.mirrors/MirroredError"},"isThrowable":true,"id":"MirroredUncaughtExceptionError","name":"MirroredUncaughtExceptionError","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"id":"toString0()","name":"toString","kind":"method","line":"693"},{"isFinal":true,"ref":{"name":"InstanceMirror","refId":"dart.mirrors/InstanceMirror"},"id":"exception_mirror","name":"exception_mirror","kind":"variable","line":"685"},{"isFinal":true,"ref":{"name":"String","refId":"dart.core/String"},"id":"exception_string","name":"exception_string","kind":"variable","line":"688"},{"isFinal":true,"ref":{"name":"Object","refId":"dart.core/Object"},"id":"stacktrace","name":"stacktrace","kind":"variable","line":"691"},{"id":"MirroredUncaughtExceptionError3()","name":"MirroredUncaughtExceptionError","children":[{"initializedField":{"name":"exception_mirror","refId":"dart.mirrors/MirroredUncaughtExceptionError/exception_mirror"},"ref":{"name":"InstanceMirror","refId":"dart.mirrors/InstanceMirror"},"id":"exception_mirror","name":"exception_mirror","kind":"param"},{"initializedField":{"name":"exception_string","refId":"dart.mirrors/MirroredUncaughtExceptionError/exception_string"},"ref":{"name":"String","refId":"dart.core/String"},"id":"exception_string","name":"exception_string","kind":"param","line":"681"},{"initializedField":{"name":"stacktrace","refId":"dart.mirrors/MirroredUncaughtExceptionError/stacktrace"},"ref":{"name":"Object","refId":"dart.core/Object"},"id":"stacktrace","name":"stacktrace","kind":"param","line":"682"}],"kind":"constructor","line":"680"}],"uri":"dart/sdk/lib/mirrors/mirrors_impl.dart","kind":"class","comment":"\nWhen an uncaught exception occurs during the mirrored execution\nof code, a [MirroredUncaughtExceptionError] is thrown.\n\nThis exception contains a mirror on the original exception object.\nIt also contains an object which can be used to recover the\nstacktrace.\n","line":"679"},{"interfaces":[{"name":"Exception","refId":"dart.core/Exception"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"isThrowable":true,"id":"MirroredError","name":"MirroredError","uri":"dart/sdk/lib/mirrors/mirrors_impl.dart","kind":"class","comment":"\nWhen an error occurs during the mirrored execution of code, a\n[MirroredError] is thrown.\n\nIn general, there are three main classes of failure that can happen\nduring mirrored execution of code in some isolate:\n\n- An exception is thrown but not caught.  This is caught by the\n  mirrors framework and a [MirroredUncaughtExceptionError] is\n  created and thrown.\n\n- A compile-time error occurs, such as a syntax error.  This is\n  suppressed by the mirrors framework and a\n  [MirroredCompilationError] is created and thrown.\n\n- A truly fatal error occurs, causing the isolate to be exited.  If\n  the reflector and reflectee share the same isolate, then they\n  will both suffer.  If the reflector and reflectee are in distinct\n  isolates, then we hope to provide some information about the\n  isolate death, but this has yet to be implemented.\n\nTODO(turnidge): Specify the behavior for remote fatal errors.\n","line":"668"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"id":"SourceLocation","name":"SourceLocation","uri":"dart/sdk/lib/mirrors/mirrors_impl.dart","kind":"class","comment":"\nA [SourceLocation] describes the span of an entity in Dart source code.\n","line":"642"},{"interfaces":[{"name":"VariableMirror","refId":"dart.mirrors/VariableMirror"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"id":"ParameterMirror","name":"ParameterMirror","children":[{"ref":{"name":"TypeMirror","refId":"dart.mirrors/TypeMirror"},"id":"type","name":"type","kind":"property","comment":"\nA mirror on the type of this parameter.\n","line":"613"},{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"isOptional","name":"isOptional","kind":"property","comment":"\nIs this parameter optional?\n","line":"618"},{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"isNamed","name":"isNamed","kind":"property","comment":"\nIs this parameter named?\n","line":"623"},{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"hasDefaultValue","name":"hasDefaultValue","kind":"property","comment":"\nDoes this parameter have a default value?\n","line":"628"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"defaultValue","name":"defaultValue","kind":"property","comment":"\nA mirror on the default value for this parameter, if it exists.\n\nTODO(turnidge): String may not be a good representation of this\nat runtime.\n","line":"636"}],"uri":"dart/sdk/lib/mirrors/mirrors_impl.dart","kind":"class","comment":"\nA [ParameterMirror] reflects a Dart formal parameter declaration.\n","line":"609"},{"interfaces":[{"name":"DeclarationMirror","refId":"dart.mirrors/DeclarationMirror"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"id":"VariableMirror","name":"VariableMirror","children":[{"ref":{"name":"TypeMirror","refId":"dart.mirrors/TypeMirror"},"id":"type","name":"type","kind":"property","comment":"\nA mirror on the type of the reflectee.\n","line":"590"},{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"isStatic","name":"isStatic","kind":"property","comment":"\nIs the reflectee a static variable?\n\nFor the purposes of the mirror library, top-level variables are\nimplicitly declared static.\n","line":"598"},{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"isFinal","name":"isFinal","kind":"property","comment":"\nIs the reflectee a final variable?\n","line":"603"}],"uri":"dart/sdk/lib/mirrors/mirrors_impl.dart","kind":"class","comment":"\nA [VariableMirror] reflects a Dart language variable declaration.\n","line":"586"},{"interfaces":[{"name":"DeclarationMirror","refId":"dart.mirrors/DeclarationMirror"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"id":"MethodMirror","name":"MethodMirror","children":[{"ref":{"name":"TypeMirror","refId":"dart.mirrors/TypeMirror"},"id":"returnType","name":"returnType","kind":"property","comment":"\nA mirror on the return type for the reflectee.\n","line":"502"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"ParameterMirror","refId":"dart.mirrors/ParameterMirror"}]},"id":"parameters","name":"parameters","kind":"property","comment":"\nA list of mirrors on the parameters for the reflectee.\n","line":"507"},{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"isStatic","name":"isStatic","kind":"property","comment":"\nIs the reflectee static?\n\nFor the purposes of the mirrors library, a top-level function is\nconsidered static.\n","line":"515"},{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"isAbstract","name":"isAbstract","kind":"property","comment":"\nIs the reflectee abstract?\n","line":"520"},{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"isRegularMethod","name":"isRegularMethod","kind":"property","comment":"\nIs the reflectee a regular function or method?\n\nA function or method is regular if it is not a getter, setter, or\nconstructor.  Note that operators, by this definition, are\nregular methods.\n","line":"529"},{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"isOperator","name":"isOperator","kind":"property","comment":"\nIs the reflectee an operator?\n","line":"534"},{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"isGetter","name":"isGetter","kind":"property","comment":"\nIs the reflectee a getter?\n","line":"539"},{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"isSetter","name":"isSetter","kind":"property","comment":"\nIs the reflectee a setter?\n","line":"544"},{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"isConstructor","name":"isConstructor","kind":"property","comment":"\nIs the reflectee a constructor?\n","line":"549"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"constructorName","name":"constructorName","kind":"property","comment":"\nThe constructor name for named constructors and factory methods.\n\nFor unnamed constructors, this is the empty string.  For\nnon-constructors, this is the empty string.\n\nFor example, [:'bar':] is the constructor name for constructor\n[:Foo.bar:] of type [:Foo:].\n","line":"560"},{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"isConstConstructor","name":"isConstConstructor","kind":"property","comment":"\nIs the reflectee a const constructor?\n","line":"565"},{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"isGenerativeConstructor","name":"isGenerativeConstructor","kind":"property","comment":"\nIs the reflectee a generative constructor?\n","line":"570"},{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"isRedirectingConstructor","name":"isRedirectingConstructor","kind":"property","comment":"\nIs the reflectee a redirecting constructor?\n","line":"575"},{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"isFactoryConstructor","name":"isFactoryConstructor","kind":"property","comment":"\nIs the reflectee a factory constructor?\n","line":"580"}],"uri":"dart/sdk/lib/mirrors/mirrors_impl.dart","kind":"class","comment":"\nA [MethodMirror] reflects a Dart language function, method,\nconstructor, getter, or setter.\n","line":"498"},{"interfaces":[{"name":"ClassMirror","refId":"dart.mirrors/ClassMirror"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"id":"TypedefMirror","name":"TypedefMirror","children":[{"ref":{"name":"TypeMirror","refId":"dart.mirrors/TypeMirror"},"id":"value","name":"value","kind":"property","comment":"\nThe defining type for this typedef.\n\nFor instance [:void f(int):] is the value for [:typedef void f(int):].\n","line":"491"}],"uri":"dart/sdk/lib/mirrors/mirrors_impl.dart","kind":"class","comment":"\nA [TypedefMirror] represents a typedef in a Dart language program.\n","line":"485"},{"superclass":{"name":"TypeMirror","refId":"dart.mirrors/TypeMirror"},"isAbstract":true,"id":"TypeVariableMirror","name":"TypeVariableMirror","children":[{"ref":{"name":"TypeMirror","refId":"dart.mirrors/TypeMirror"},"id":"upperBound","name":"upperBound","kind":"property","comment":"\nA mirror on the type that is the upper bound of this type variable.\n","line":"479"}],"uri":"dart/sdk/lib/mirrors/mirrors_impl.dart","kind":"class","comment":"\nA [TypeVariableMirror] represents a type parameter of a generic\ntype.\n","line":"475"},{"interfaces":[{"name":"ClassMirror","refId":"dart.mirrors/ClassMirror"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"id":"FunctionTypeMirror","name":"FunctionTypeMirror","children":[{"ref":{"name":"TypeMirror","refId":"dart.mirrors/TypeMirror"},"id":"returnType","name":"returnType","kind":"property","comment":"\nThe return type of the reflectee.\n","line":"456"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"ParameterMirror","refId":"dart.mirrors/ParameterMirror"}]},"id":"parameters","name":"parameters","kind":"property","comment":"\nA list of the parameter types of the reflectee.\n","line":"461"},{"ref":{"name":"MethodMirror","refId":"dart.mirrors/MethodMirror"},"id":"callMethod","name":"callMethod","kind":"property","comment":"\nA mirror on the [:call:] method for the reflectee.\n\nTODO(turnidge): What is this and what is it for?\n","line":"468"}],"uri":"dart/sdk/lib/mirrors/mirrors_impl.dart","kind":"class","comment":"\nA [FunctionTypeMirror] represents the type of a function in the\nDart language.\n","line":"452"},{"interfaces":[{"name":"ObjectMirror","refId":"dart.mirrors/ObjectMirror"},{"name":"TypeMirror","refId":"dart.mirrors/TypeMirror"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"id":"ClassMirror","name":"ClassMirror","children":[{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"InstanceMirror","refId":"dart.mirrors/InstanceMirror"}]},"id":"newInstance3()","name":"newInstance","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"constructorName","name":"constructorName","kind":"param"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Object","refId":"dart.core/Object"}]},"id":"positionalArguments","name":"positionalArguments","kind":"param","line":"428"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"Object","refId":"dart.core/Object"}]},"isOptional":true,"id":"namedArguments","name":"namedArguments","kind":"param","line":"429"}],"kind":"method","comment":"\nInvokes the named constructor and returns a mirror on the result.\n\nTODO(turnidge): Properly document.\n","line":"427"},{"ref":{"name":"ClassMirror","refId":"dart.mirrors/ClassMirror"},"id":"superclass","name":"superclass","kind":"property","comment":"\nA mirror on the superclass on the reflectee.\n\nIf this type is [:Object:] or a typedef, the superClass will be\nnull.\n","line":"334"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"ClassMirror","refId":"dart.mirrors/ClassMirror"}]},"id":"superinterfaces","name":"superinterfaces","kind":"property","comment":"\nA list of mirrors on the superinterfaces of the reflectee.\n","line":"339"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"Mirror","refId":"dart.mirrors/Mirror"}]},"id":"members","name":"members","kind":"property","comment":"\nAn immutable map from from names to mirrors for all members of\nthis type.\n\nThe members of a type are its methods, fields, getters, and\nsetters.  Note that constructors and type variables are not\nconsidered to be members of a type.\n\nThis does not include inherited members.\n","line":"351"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"MethodMirror","refId":"dart.mirrors/MethodMirror"}]},"id":"methods","name":"methods","kind":"property","comment":"\nAn immutable map from names to mirrors for all method,\ndeclarations for this type.  This does not include getters and\nsetters.\n","line":"358"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"MethodMirror","refId":"dart.mirrors/MethodMirror"}]},"id":"getters","name":"getters","kind":"property","comment":"\nAn immutable map from names to mirrors for all getter\ndeclarations for this type.\n","line":"364"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"MethodMirror","refId":"dart.mirrors/MethodMirror"}]},"id":"setters","name":"setters","kind":"property","comment":"\nAn immutable map from names to mirrors for all setter\ndeclarations for this type.\n","line":"370"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"VariableMirror","refId":"dart.mirrors/VariableMirror"}]},"id":"variables","name":"variables","kind":"property","comment":"\nAn immutable map from names to mirrors for all variable\ndeclarations for this type.\n","line":"376"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"MethodMirror","refId":"dart.mirrors/MethodMirror"}]},"id":"constructors","name":"constructors","kind":"property","comment":"\nAn immutable map from names to mirrors for all constructor\ndeclarations for this type.\n","line":"382"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"TypeVariableMirror","refId":"dart.mirrors/TypeVariableMirror"}]},"id":"typeVariables","name":"typeVariables","kind":"property","comment":"\nAn immutable map from names to mirrors for all type variables for\nthis type.\n\nThis map preserves the order of declaration of the type variables.\n","line":"390"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"TypeMirror","refId":"dart.mirrors/TypeMirror"}]},"id":"typeArguments","name":"typeArguments","kind":"property","comment":"\nAn immutable map from names to mirrors for all type arguments for\nthis type.\n\nThis map preserves the order of declaration of the type variables.\n","line":"398"},{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"isOriginalDeclaration","name":"isOriginalDeclaration","kind":"property","comment":"\nIs this the original declaration of this type?\n\nFor most classes, they are their own original declaration.  For\ngeneric classes, however, there is a distinction between the\noriginal class declaration, which has unbound type variables, and\nthe instantiations of generic classes, which have bound type\nvariables.\n","line":"409"},{"ref":{"name":"ClassMirror","refId":"dart.mirrors/ClassMirror"},"id":"originalDeclaration","name":"originalDeclaration","kind":"property","comment":"\nA mirror on the original declaration of this type.\n\nFor most classes, they are their own original declaration.  For\ngeneric classes, however, there is a distinction between the\noriginal class declaration, which has unbound type variables, and\nthe instantiations of generic classes, which have bound type\nvariables.\n","line":"420"},{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"isClass","name":"isClass","kind":"property","comment":"\nDoes this mirror represent a class?\n\nTODO(turnidge): This functions goes away after the\nclass/interface changes.\n","line":"437"},{"ref":{"name":"ClassMirror","refId":"dart.mirrors/ClassMirror"},"id":"defaultFactory","name":"defaultFactory","kind":"property","comment":"\nA mirror on the default factory class or null if there is none.\n\nTODO(turnidge): This functions goes away after the\nclass/interface changes.\n","line":"445"}],"uri":"dart/sdk/lib/mirrors/mirrors_impl.dart","kind":"class","comment":"\nA [ClassMirror] reflects a Dart language class.\n","line":"327"},{"interfaces":[{"name":"DeclarationMirror","refId":"dart.mirrors/DeclarationMirror"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"id":"TypeMirror","name":"TypeMirror","uri":"dart/sdk/lib/mirrors/mirrors_impl.dart","kind":"class","comment":"\nA [TypeMirror] reflects a Dart language class, typedef\nor type variable.\n","line":"321"},{"interfaces":[{"name":"ObjectMirror","refId":"dart.mirrors/ObjectMirror"},{"name":"DeclarationMirror","refId":"dart.mirrors/DeclarationMirror"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"id":"LibraryMirror","name":"LibraryMirror","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"url","name":"url","kind":"property","comment":"\nThe url of the library.\n\nTODO(turnidge): Document where this url comes from.  Will this\nvalue be sensible?\n","line":"275"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"Mirror","refId":"dart.mirrors/Mirror"}]},"id":"members","name":"members","kind":"property","comment":"\nAn immutable map from from names to mirrors for all members in\nthis library.\n\nThe members of a library are its top-level classes,\nfunctions, variables, getters, and setters.\n","line":"284"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"ClassMirror","refId":"dart.mirrors/ClassMirror"}]},"id":"classes","name":"classes","kind":"property","comment":"\nAn immutable map from names to mirrors for all class\ndeclarations in this library.\n","line":"290"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"MethodMirror","refId":"dart.mirrors/MethodMirror"}]},"id":"functions","name":"functions","kind":"property","comment":"\nAn immutable map from names to mirrors for all function, getter,\nand setter declarations in this library.\n","line":"296"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"MethodMirror","refId":"dart.mirrors/MethodMirror"}]},"id":"getters","name":"getters","kind":"property","comment":"\nAn immutable map from names to mirrors for all getter\ndeclarations in this library.\n","line":"302"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"MethodMirror","refId":"dart.mirrors/MethodMirror"}]},"id":"setters","name":"setters","kind":"property","comment":"\nAn immutable map from names to mirrors for all setter\ndeclarations in this library.\n","line":"308"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"VariableMirror","refId":"dart.mirrors/VariableMirror"}]},"id":"variables","name":"variables","kind":"property","comment":"\nAn immutable map from names to mirrors for all variable\ndeclarations in this library.\n","line":"314"}],"uri":"dart/sdk/lib/mirrors/mirrors_impl.dart","kind":"class","comment":"\nA [LibraryMirror] reflects a Dart language library, providing\naccess to the variables, functions, and classes of the\nlibrary.\n","line":"268"},{"interfaces":[{"name":"InstanceMirror","refId":"dart.mirrors/InstanceMirror"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"id":"ClosureMirror","name":"ClosureMirror","children":[{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"InstanceMirror","refId":"dart.mirrors/InstanceMirror"}]},"id":"apply2()","name":"apply","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Object","refId":"dart.core/Object"}]},"id":"positionalArguments","name":"positionalArguments","kind":"param"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"Object","refId":"dart.core/Object"}]},"isOptional":true,"id":"namedArguments","name":"namedArguments","kind":"param","line":"254"}],"kind":"method","comment":"\nExecutes the closure. The arguments given in the descriptor need to\nbe InstanceMirrors or simple values.\n\nA value is simple if one of the following holds:\n - the value is null\n - the value is of type [num]\n - the value is of type [bool]\n - the value is of type [String]\n","line":"253"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"InstanceMirror","refId":"dart.mirrors/InstanceMirror"}]},"id":"findInContext1()","name":"findInContext","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"name","name":"name","kind":"param"}],"kind":"method","comment":"\nLooks up the value of a name in the scope of the closure. The\nresult is a mirror on that value.\n","line":"260"},{"ref":{"name":"MethodMirror","refId":"dart.mirrors/MethodMirror"},"id":"function","name":"function","kind":"property","comment":"\nA mirror on the function associated with this closure.\n","line":"234"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"source","name":"source","kind":"property","comment":"\nThe source code for this closure, if available.  Otherwise null.\n\nTODO(turnidge): Would this just be available in function?\n","line":"241"}],"uri":"dart/sdk/lib/mirrors/mirrors_impl.dart","kind":"class","comment":"\nA [ClosureMirror] reflects a closure.\n\nA [ClosureMirror] provides access to its captured variables and\nprovides the ability to execute its reflectee.\n","line":"230"},{"interfaces":[{"name":"ObjectMirror","refId":"dart.mirrors/ObjectMirror"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"id":"InstanceMirror","name":"InstanceMirror","children":[{"ref":{"name":"ClassMirror","refId":"dart.mirrors/ClassMirror"},"id":"type","name":"type","kind":"property","comment":"\nA mirror on the type of the reflectee.\n","line":"197"},{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"hasReflectee","name":"hasReflectee","kind":"property","comment":"\nDoes [reflectee] contain the instance reflected by this mirror?\nThis will always be true in the local case (reflecting instances\nin the same isolate), but only true in the remote case if this\nmirror reflects a simple value.\n\nA value is simple if one of the following holds:\n - the value is null\n - the value is of type [num]\n - the value is of type [bool]\n - the value is of type [String]\n","line":"211"},{"id":"reflectee","name":"reflectee","kind":"property","comment":"\nIf the [InstanceMirror] reflects an instance it is meaningful to\nhave a local reference to, we provide access to the actual\ninstance here.\n\nIf you access [reflectee] when [hasReflectee] is false, an\nexception is thrown.\n","line":"221"}],"uri":"dart/sdk/lib/mirrors/mirrors_impl.dart","kind":"class","comment":"\nAn [InstanceMirror] reflects an instance of a Dart language object.\n","line":"193"},{"interfaces":[{"name":"Mirror","refId":"dart.mirrors/Mirror"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"id":"ObjectMirror","name":"ObjectMirror","children":[{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"InstanceMirror","refId":"dart.mirrors/InstanceMirror"}]},"id":"invoke3()","name":"invoke","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"memberName","name":"memberName","kind":"param"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Object","refId":"dart.core/Object"}]},"id":"positionalArguments","name":"positionalArguments","kind":"param","line":"168"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"Object","refId":"dart.core/Object"}]},"isOptional":true,"id":"namedArguments","name":"namedArguments","kind":"param","line":"169"}],"kind":"method","comment":"\nInvokes the named function and returns a mirror on the result.\n\nTODO(turnidge): Properly document.\nTODO(turnidge): Handle ambiguous names.\nTODO(turnidge): Handle optional & named arguments.\n","line":"167"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"InstanceMirror","refId":"dart.mirrors/InstanceMirror"}]},"id":"getField1()","name":"getField","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"fieldName","name":"fieldName","kind":"param"}],"kind":"method","comment":"\nInvokes a getter and returns a mirror on the result. The getter\ncan be the implicit getter for a field or a user-defined getter\nmethod.\n\nTODO(turnidge): Handle ambiguous names.\n","line":"178"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"InstanceMirror","refId":"dart.mirrors/InstanceMirror"}]},"id":"setField2()","name":"setField","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"fieldName","name":"fieldName","kind":"param"},{"ref":{"name":"Object","refId":"dart.core/Object"},"id":"value","name":"value","kind":"param"}],"kind":"method","comment":"\nInvokes a setter and returns a mirror on the result. The setter\nmay be either the implicit setter for a non-final field or a\nuser-defined setter method.\n\nTODO(turnidge): Handle ambiguous names.\n","line":"187"}],"uri":"dart/sdk/lib/mirrors/mirrors_impl.dart","kind":"class","comment":"\nAn [ObjectMirror] is a common superinterface of [InstanceMirror],\n[ClassMirror], and [LibraryMirror] that represents their shared\nfunctionality.\n\nFor the purposes of the mirrors library, these types are all\nobject-like, in that they support method invocation and field\naccess.  Real Dart objects are represented by the [InstanceMirror]\ntype.\n\nSee [InstanceMirror], [ClassMirror], and [LibraryMirror].\n","line":"159"},{"interfaces":[{"name":"Mirror","refId":"dart.mirrors/Mirror"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"id":"DeclarationMirror","name":"DeclarationMirror","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"simpleName","name":"simpleName","kind":"property","comment":"\nThe simple name for this Dart language entity.\n\nThe simple name is in most cases the the identifier name of the\nentity, such as 'method' for a method [:void method() {...}:] or\n'mylibrary' for a [:#library('mylibrary');:] declaration.\n","line":"103"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"qualifiedName","name":"qualifiedName","kind":"property","comment":"\nThe fully-qualified name for this Dart language entity.\n\nThis name is qualified by the name of the owner. For instance,\nthe qualified name of a method 'method' in class 'Class' in\nlibrary 'library' is 'library.Class.method'.\n\nTODO(turnidge): Specify whether this name is unique.  Currently\nthis is a gray area due to lack of clarity over whether library\nnames are unique.\n","line":"116"},{"ref":{"name":"DeclarationMirror","refId":"dart.mirrors/DeclarationMirror"},"id":"owner","name":"owner","kind":"property","comment":"\nA mirror on the owner of this function.  This is the declaration\nimmediately surrounding the reflectee.\n\nNote that for libraries, the owner will be [:null:].\n","line":"124"},{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"isPrivate","name":"isPrivate","kind":"property","comment":"\nIs this declaration private?\n\nNote that for libraries, this will be [:false:].\n","line":"131"},{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"isTopLevel","name":"isTopLevel","kind":"property","comment":"\nIs this declaration top-level?\n\nThis is defined to be equivalent to:\n   [:mirror.owner != null && mirror.owner is LibraryMirror:]\n","line":"139"},{"ref":{"name":"SourceLocation","refId":"dart.mirrors/SourceLocation"},"id":"location","name":"location","kind":"property","comment":"\nThe source location of this Dart language entity.\n","line":"144"}],"uri":"dart/sdk/lib/mirrors/mirrors_impl.dart","kind":"class","comment":"\nA [DeclarationMirror] reflects some entity declared in a Dart program.\n","line":"95"},{"interfaces":[{"name":"Mirror","refId":"dart.mirrors/Mirror"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"id":"IsolateMirror","name":"IsolateMirror","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"debugName","name":"debugName","kind":"property","comment":"\nA unique name used to refer to an isolate in debugging messages.\n","line":"79"},{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"isCurrent","name":"isCurrent","kind":"property","comment":"\nDoes this mirror reflect the currently running isolate?\n","line":"84"},{"ref":{"name":"LibraryMirror","refId":"dart.mirrors/LibraryMirror"},"id":"rootLibrary","name":"rootLibrary","kind":"property","comment":"\nA mirror on the root library for this isolate.\n","line":"89"}],"uri":"dart/sdk/lib/mirrors/mirrors_impl.dart","kind":"class","comment":"\nAn [IsolateMirror] reflects an isolate.\n","line":"75"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"id":"Mirror","name":"Mirror","children":[{"ref":{"name":"MirrorSystem","refId":"dart.mirrors/MirrorSystem"},"id":"mirrors","name":"mirrors","kind":"property","comment":"\nThe [MirrorSystem] that contains this mirror.\n","line":"69"}],"uri":"dart/sdk/lib/mirrors/mirrors_impl.dart","kind":"class","comment":"\nA [Mirror] reflects some Dart language entity.\n\nEvery [Mirror] originates from some [MirrorSystem].\n","line":"65"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"id":"MirrorSystem","name":"MirrorSystem","children":[{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"LibraryMirror","refId":"dart.mirrors/LibraryMirror"}]},"id":"libraries","name":"libraries","kind":"property","comment":"\nAn immutable map from from library names to mirrors for all\nlibraries known to this mirror system.\n","line":"22"},{"ref":{"name":"IsolateMirror","refId":"dart.mirrors/IsolateMirror"},"id":"isolate","name":"isolate","kind":"property","comment":"\nA mirror on the isolate associated with this [MirrorSystem].\nThis may be null if this mirror system is not running.\n","line":"28"},{"ref":{"name":"TypeMirror","refId":"dart.mirrors/TypeMirror"},"id":"dynamicType","name":"dynamicType","kind":"property","comment":"\nA mirror on the [:dynamic:] type.\n","line":"33"},{"ref":{"name":"TypeMirror","refId":"dart.mirrors/TypeMirror"},"id":"voidType","name":"voidType","kind":"property","comment":"\nA mirror on the [:void:] type.\n","line":"38"}],"uri":"dart/sdk/lib/mirrors/mirrors_impl.dart","kind":"class","comment":"\nA [MirrorSystem] is the main interface used to reflect on a set of\nassociated libraries.\n\nAt runtime each running isolate has a distinct [MirrorSystem].\n\nIt is also possible to have a [MirrorSystem] which represents a set\nof libraries which are not running -- perhaps at compile-time.  In\nthis case, all available reflective functionality would be\nsupported, but runtime functionality (such as invoking a function\nor inspecting the contents of a variable) would fail dynamically.\n","line":"17"}],"uri":"dart/sdk/lib/mirrors/mirrors.dart","kind":"library","line":"15"}